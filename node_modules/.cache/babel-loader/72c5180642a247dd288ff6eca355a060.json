{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/gokul/Desktop/React Lane/socialink-client/src/Inks/PostInk.js\";\nimport React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport MyButton from '../util/MyButton'; // MUI Stuff\n\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport AddIcon from '@material-ui/icons/Add';\nimport CloseIcon from '@material-ui/icons/Close'; // Redux stuff\n\nimport { connect } from 'react-redux';\nimport { postInk, clearErrors } from '../redux/actions/dataActions';\nimport '../components/Ink.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass PostInk extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      open: false,\n      body: '',\n      errors: {}\n    };\n\n    this.handleImageChange = event => {\n      const image = event.target.files[0];\n      const formData = new FormData();\n      formData.append('image', image, image.name);\n      this.props.uploadImage(formData);\n    };\n\n    this.handleEditPicture = () => {\n      const fileInput = document.getElementById('imageInput');\n      fileInput.click();\n    };\n\n    this.handleOpen = () => {\n      this.setState({\n        open: true\n      });\n    };\n\n    this.handleClose = () => {\n      this.props.clearErrors();\n      this.setState({\n        open: false,\n        errors: {}\n      });\n    };\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      this.props.postInk({\n        body: this.state.body\n      });\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.UI.errors) {\n      this.setState({\n        errors: nextProps.UI.errors\n      });\n    }\n\n    if (!nextProps.UI.errors && !nextProps.UI.loading) {\n      this.setState({\n        body: '',\n        open: false,\n        errors: {}\n      });\n    }\n  }\n\n  render() {\n    const {\n      errors\n    } = this.state;\n    const {\n      UI: {\n        loading\n      }\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(MyButton, {\n        onClick: this.handleOpen,\n        tip: \"Post an Ink!\",\n        children: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n        open: this.state.open,\n        onClose: this.handleClose,\n        fullWidth: true,\n        maxWidth: \"sm\",\n        children: [/*#__PURE__*/_jsxDEV(MyButton, {\n          tip: \"Close\",\n          onClick: this.handleClose,\n          tipClassName: \"closeButton\",\n          children: /*#__PURE__*/_jsxDEV(CloseIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(DialogTitle, {\n          children: \"Post a new scream\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: this.handleSubmit,\n            children: [/*#__PURE__*/_jsxDEV(TextField, {\n              name: \"body\",\n              type: \"text\",\n              label: \"INK!!\",\n              multiline: true,\n              rows: \"3\",\n              placeholder: \"INK BODY\",\n              error: errors.body ? true : false,\n              helperText: errors.body,\n              className: \"Textfield\",\n              onChange: this.handleChange,\n              fullWidth: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              type: \"submit\",\n              variant: \"contained\",\n              color: \"primary\",\n              className: \"submitbutton\",\n              disabled: loading,\n              children: [\"Submit\", loading && /*#__PURE__*/_jsxDEV(CircularProgress, {\n                size: 30,\n                className: \"progressspinner\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 108,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nPostInk.propTypes = {\n  postInk: PropTypes.func.isRequired,\n  clearErrors: PropTypes.func.isRequired,\n  UI: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  UI: state.UI\n});\n\nexport default connect(mapStateToProps, {\n  postInk,\n  clearErrors\n})(PostInk);","map":{"version":3,"sources":["/mnt/c/Users/gokul/Desktop/React Lane/socialink-client/src/Inks/PostInk.js"],"names":["React","Component","Fragment","PropTypes","MyButton","Button","TextField","Dialog","DialogContent","DialogTitle","CircularProgress","AddIcon","CloseIcon","connect","postInk","clearErrors","PostInk","state","open","body","errors","handleImageChange","event","image","target","files","formData","FormData","append","name","props","uploadImage","handleEditPicture","fileInput","document","getElementById","click","handleOpen","setState","handleClose","handleChange","value","handleSubmit","preventDefault","componentWillReceiveProps","nextProps","UI","loading","render","propTypes","func","isRequired","object","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport MyButton from '../util/MyButton';\n// MUI Stuff\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport AddIcon from '@material-ui/icons/Add';\nimport CloseIcon from '@material-ui/icons/Close';\n// Redux stuff\nimport { connect } from 'react-redux';\nimport { postInk, clearErrors } from '../redux/actions/dataActions';\nimport '../components/Ink.css';\n\nclass PostInk extends Component {\n  state = {\n    open: false,\n    body: '',\n    errors: {}\n  };\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.UI.errors) {\n      this.setState({\n        errors: nextProps.UI.errors\n      });\n    }\n    if (!nextProps.UI.errors && !nextProps.UI.loading) {\n      this.setState({ body: '', open: false, errors: {} });\n    }\n  }\n  \thandleImageChange = (event) => {\n\t\tconst image = event.target.files[0];\n\t\tconst formData = new FormData();\n\t\tformData.append('image', image, image.name);\n\t\tthis.props.uploadImage(formData);\n\t};\n\n\thandleEditPicture = () => {\n\t\tconst fileInput = document.getElementById('imageInput');\n\t\tfileInput.click();\n\t};\n  handleOpen = () => {\n    this.setState({ open: true });\n  };\n  handleClose = () => {\n    this.props.clearErrors();\n    this.setState({ open: false, errors: {} });\n  };\n  handleChange = (event) => {\n    this.setState({ [event.target.name]: event.target.value });\n  };\n  handleSubmit = (event) => {\n    event.preventDefault();\n    this.props.postInk({ body: this.state.body });\n  };\n  render() {\n    const { errors } = this.state;\n    const {\n      UI: { loading }\n    } = this.props;\n    return (\n      <Fragment>\n        <MyButton onClick={this.handleOpen} tip=\"Post an Ink!\">\n          <AddIcon />\n        </MyButton>\n        <Dialog\n          open={this.state.open}\n          onClose={this.handleClose}\n          fullWidth\n          maxWidth=\"sm\"\n        >\n          <MyButton\n            tip=\"Close\"\n            onClick={this.handleClose}\n            tipClassName=\"closeButton\"\n          >\n            <CloseIcon />\n          </MyButton>\n          <DialogTitle>Post a new scream</DialogTitle>\n          <DialogContent>\n            <form onSubmit={this.handleSubmit}>\n              <TextField\n                name=\"body\"\n                type=\"text\"\n                label=\"INK!!\"\n                multiline\n                rows=\"3\"\n                placeholder=\"INK BODY\"\n                error={errors.body ? true : false}\n                helperText={errors.body}\n                className=\"Textfield\"\n                onChange={this.handleChange}\n                fullWidth\n              />\n\n              <Button\n                type=\"submit\"\n                variant=\"contained\"\n                color=\"primary\"\n                className=\"submitbutton\"\n                disabled={loading}\n              >\n                Submit\n                {loading && (\n                  <CircularProgress\n                    size={30}\n                    className=\"progressspinner\"\n                  />\n                )}\n              </Button>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </Fragment>\n    );\n  }\n}\n\nPostInk.propTypes = {\n  postInk: PropTypes.func.isRequired,\n  clearErrors: PropTypes.func.isRequired,\n  UI: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = (state) => ({\n  UI: state.UI\n});\n\nexport default connect(\n  mapStateToProps,\n  { postInk, clearErrors }\n)(PostInk);"]},"metadata":{},"sourceType":"module"}