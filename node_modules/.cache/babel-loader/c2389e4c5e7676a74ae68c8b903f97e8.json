{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/gokul/Desktop/React Lane/socialink-client/src/Inks/PostInk.js\";\nimport React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport MyButton from '../util/MyButton'; // MUI Stuff\n\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport AddIcon from '@material-ui/icons/Add';\nimport CloseIcon from '@material-ui/icons/Close'; // Redux stuff\n\nimport { connect } from 'react-redux';\nimport { postInk, clearErrors } from '../redux/actions/dataActions';\nimport theme from '../util/theme';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst styles = theme => ({ ...theme,\n  submitButton: {\n    position: 'relative',\n    float: 'right',\n    marginTop: 10\n  },\n  progressSpinner: {\n    position: 'absolute'\n  },\n  closeButton: {\n    position: 'absolute',\n    left: '91%',\n    top: '6%'\n  }\n});\n\nclass PostInk extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      open: false,\n      body: '',\n      errors: {}\n    };\n\n    this.handleOpen = () => {\n      this.setState({\n        open: true\n      });\n    };\n\n    this.handleClose = () => {\n      this.props.clearErrors();\n      this.setState({\n        open: false,\n        errors: {}\n      });\n    };\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      this.props.postScream({\n        body: this.state.body\n      });\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.UI.errors) {\n      this.setState({\n        errors: nextProps.UI.errors\n      });\n    }\n\n    if (!nextProps.UI.errors && !nextProps.UI.loading) {\n      this.setState({\n        body: '',\n        open: false,\n        errors: {}\n      });\n    }\n  }\n\n  render() {\n    const {\n      errors\n    } = this.state;\n    const {\n      classes,\n      UI: {\n        loading\n      }\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(MyButton, {\n        onClick: this.handleOpen,\n        tip: \"Post an Ink!\",\n        children: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n        open: this.state.open,\n        onClose: this.handleClose,\n        fullWidth: true,\n        maxWidth: \"sm\",\n        children: [/*#__PURE__*/_jsxDEV(MyButton, {\n          tip: \"Close\",\n          onClick: this.handleClose,\n          tipClassName: classes.closeButton,\n          children: /*#__PURE__*/_jsxDEV(CloseIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(DialogTitle, {\n          children: \"Post a new scream\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: this.handleSubmit,\n            children: [/*#__PURE__*/_jsxDEV(TextField, {\n              name: \"body\",\n              type: \"text\",\n              label: \"INK!!\",\n              multiline: true,\n              rows: \"3\",\n              placeholder: \"INK BODY\",\n              error: errors.body ? true : false,\n              helperText: errors.body,\n              className: classes.textField,\n              onChange: this.handleChange,\n              fullWidth: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              type: \"submit\",\n              variant: \"contained\",\n              color: \"primary\",\n              className: classes.submitButton,\n              disabled: loading,\n              children: [\"Submit\", loading && /*#__PURE__*/_jsxDEV(CircularProgress, {\n                size: 30,\n                className: classes.progressSpinner\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 115,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nPostInk.propTypes = {\n  postScream: PropTypes.func.isRequired,\n  clearErrors: PropTypes.func.isRequired,\n  UI: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  UI: state.UI\n});\n\nexport default connect(mapStateToProps, {\n  postScream,\n  clearErrors\n})(withStyles(styles)(PostScream));","map":{"version":3,"sources":["/mnt/c/Users/gokul/Desktop/React Lane/socialink-client/src/Inks/PostInk.js"],"names":["React","Component","Fragment","PropTypes","withStyles","MyButton","Button","TextField","Dialog","DialogContent","DialogTitle","CircularProgress","AddIcon","CloseIcon","connect","postInk","clearErrors","theme","styles","submitButton","position","float","marginTop","progressSpinner","closeButton","left","top","PostInk","state","open","body","errors","handleOpen","setState","handleClose","props","handleChange","event","target","name","value","handleSubmit","preventDefault","postScream","componentWillReceiveProps","nextProps","UI","loading","render","classes","textField","propTypes","func","isRequired","object","mapStateToProps","PostScream"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport MyButton from '../util/MyButton';\n// MUI Stuff\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport AddIcon from '@material-ui/icons/Add';\nimport CloseIcon from '@material-ui/icons/Close';\n// Redux stuff\nimport { connect } from 'react-redux';\nimport { postInk, clearErrors } from '../redux/actions/dataActions';\nimport theme from '../util/theme';\n\nconst styles = (theme) => ({\n  ...theme,\n  submitButton: {\n    position: 'relative',\n    float: 'right',\n    marginTop: 10\n  },\n  progressSpinner: {\n    position: 'absolute'\n  },\n  closeButton: {\n    position: 'absolute',\n    left: '91%',\n    top: '6%'\n  }\n});\n\nclass PostInk extends Component {\n  state = {\n    open: false,\n    body: '',\n    errors: {}\n  };\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.UI.errors) {\n      this.setState({\n        errors: nextProps.UI.errors\n      });\n    }\n    if (!nextProps.UI.errors && !nextProps.UI.loading) {\n      this.setState({ body: '', open: false, errors: {} });\n    }\n  }\n  handleOpen = () => {\n    this.setState({ open: true });\n  };\n  handleClose = () => {\n    this.props.clearErrors();\n    this.setState({ open: false, errors: {} });\n  };\n  handleChange = (event) => {\n    this.setState({ [event.target.name]: event.target.value });\n  };\n  handleSubmit = (event) => {\n    event.preventDefault();\n    this.props.postScream({ body: this.state.body });\n  };\n  render() {\n    const { errors } = this.state;\n    const {\n      classes,\n      UI: { loading }\n    } = this.props;\n    return (\n      <Fragment>\n        <MyButton onClick={this.handleOpen} tip=\"Post an Ink!\">\n          <AddIcon />\n        </MyButton>\n        <Dialog\n          open={this.state.open}\n          onClose={this.handleClose}\n          fullWidth\n          maxWidth=\"sm\"\n        >\n          <MyButton\n            tip=\"Close\"\n            onClick={this.handleClose}\n            tipClassName={classes.closeButton}\n          >\n            <CloseIcon />\n          </MyButton>\n          <DialogTitle>Post a new scream</DialogTitle>\n          <DialogContent>\n            <form onSubmit={this.handleSubmit}>\n              <TextField\n                name=\"body\"\n                type=\"text\"\n                label=\"INK!!\"\n                multiline\n                rows=\"3\"\n                placeholder=\"INK BODY\"\n                error={errors.body ? true : false}\n                helperText={errors.body}\n                className={classes.textField}\n                onChange={this.handleChange}\n                fullWidth\n              />\n              <Button\n                type=\"submit\"\n                variant=\"contained\"\n                color=\"primary\"\n                className={classes.submitButton}\n                disabled={loading}\n              >\n                Submit\n                {loading && (\n                  <CircularProgress\n                    size={30}\n                    className={classes.progressSpinner}\n                  />\n                )}\n              </Button>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </Fragment>\n    );\n  }\n}\n\nPostInk.propTypes = {\n  postScream: PropTypes.func.isRequired,\n  clearErrors: PropTypes.func.isRequired,\n  UI: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = (state) => ({\n  UI: state.UI\n});\n\nexport default connect(\n  mapStateToProps,\n  { postScream, clearErrors }\n)(withStyles(styles)(PostScream));"]},"metadata":{},"sourceType":"module"}