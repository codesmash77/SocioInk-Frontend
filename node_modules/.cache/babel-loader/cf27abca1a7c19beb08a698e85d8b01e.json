{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/gokul/Desktop/React Lane/socialink-client/src/pages/user.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport Ink from '../components/Ink';\nimport StaticProfile from '../components/StaticProfile';\nimport Grid from '@material-ui/core/Grid';\nimport InkSkeleton from '../util/InkSkeleton';\nimport ProfileSkeleton from '../util/ProfileSkeleton';\nimport { connect } from 'react-redux';\nimport { getUserData } from '../redux/actions/dataActions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass user extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      profile: null,\n      inkIdParam: null\n    };\n  }\n\n  componentDidMount() {\n    const handle = this.props.match.params.handle;\n    const inkId = this.props.match.params.inkId;\n    if (inkId) this.setState({\n      inkIdParam: inkId\n    });\n    this.props.getUserData(handle);\n    axios.get(`/user/${handle}`).then(res => {\n      this.setState({\n        profile: res.data.user\n      });\n    }).catch(err => console.log(err));\n  }\n\n  render() {\n    const {\n      inks,\n      loading\n    } = this.props.data;\n    const {\n      inkIdParam\n    } = this.state;\n    const inksMarkup = loading ? /*#__PURE__*/_jsxDEV(ScreamSkeleton, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this) : inks === null ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No inks from this user\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this) : !inkIdParam ? inks.map(ink => /*#__PURE__*/_jsxDEV(Scream, {\n      ink: ink\n    }, ink.inkId, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 25\n    }, this)) : inks.map(ink => {\n      if (ink.inkId !== inkIdParam) return /*#__PURE__*/_jsxDEV(Scream, {\n        ink: ink\n      }, ink.inkId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 18\n      }, this);else return /*#__PURE__*/_jsxDEV(Scream, {\n        ink: ink,\n        openDialog: true\n      }, ink.inkId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 21\n      }, this);\n    });\n    return /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 16,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        sm: 8,\n        xs: 12,\n        children: inksMarkup\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        sm: 4,\n        xs: 12,\n        children: this.state.profile === null ? /*#__PURE__*/_jsxDEV(ProfileSkeleton, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(StaticProfile, {\n          profile: this.state.profile\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nuser.propTypes = {\n  getUserData: PropTypes.func.isRequired,\n  data: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  data: state.data\n});\n\nexport default connect(mapStateToProps, {\n  getUserData\n})(user);","map":{"version":3,"sources":["/mnt/c/Users/gokul/Desktop/React Lane/socialink-client/src/pages/user.js"],"names":["React","Component","PropTypes","axios","Ink","StaticProfile","Grid","InkSkeleton","ProfileSkeleton","connect","getUserData","user","state","profile","inkIdParam","componentDidMount","handle","props","match","params","inkId","setState","get","then","res","data","catch","err","console","log","render","inks","loading","inksMarkup","map","ink","propTypes","func","isRequired","object","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport Ink from '../components/Ink';\nimport StaticProfile from '../components/StaticProfile';\nimport Grid from '@material-ui/core/Grid';\n\nimport InkSkeleton from '../util/InkSkeleton';\nimport ProfileSkeleton from '../util/ProfileSkeleton';\n\nimport { connect } from 'react-redux';\nimport { getUserData } from '../redux/actions/dataActions';\n\nclass user extends Component {\n  state = {\n    profile: null,\n    inkIdParam: null\n  };\n  componentDidMount() {\n    const handle = this.props.match.params.handle;\n    const inkId = this.props.match.params.inkId;\n\n    if (inkId) this.setState({ inkIdParam: inkId });\n\n    this.props.getUserData(handle);\n    axios\n      .get(`/user/${handle}`)\n      .then((res) => {\n        this.setState({\n          profile: res.data.user\n        });\n      })\n      .catch((err) => console.log(err));\n  }\n  render() {\n    const { inks, loading } = this.props.data;\n    const { inkIdParam } = this.state;\n\n    const inksMarkup = loading ? (\n      <ScreamSkeleton />\n    ) : inks === null ? (\n      <p>No inks from this user</p>\n    ) : !inkIdParam ? (\n      inks.map((ink) => <Scream key={ink.inkId} ink={ink} />)\n    ) : (\n      inks.map((ink) => {\n        if (ink.inkId !== inkIdParam)\n          return <Scream key={ink.inkId} ink={ink} />;\n        else return <Scream key={ink.inkId} ink={ink} openDialog />;\n      })\n    );\n\n    return (\n      <Grid container spacing={16}>\n        <Grid item sm={8} xs={12}>\n          {inksMarkup}\n        </Grid>\n        <Grid item sm={4} xs={12}>\n          {this.state.profile === null ? (\n            <ProfileSkeleton />\n          ) : (\n            <StaticProfile profile={this.state.profile} />\n          )}\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nuser.propTypes = {\n  getUserData: PropTypes.func.isRequired,\n  data: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = (state) => ({\n  data: state.data\n});\n\nexport default connect(\n  mapStateToProps,\n  { getUserData }\n)(user);"]},"metadata":{},"sourceType":"module"}