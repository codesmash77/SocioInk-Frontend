{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/gokul/Desktop/React Lane/socialink-client/src/Inks/PostInk.js\";\nimport React, { Component, Fragment } from 'react';\nimport { Link } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport PropTypes from 'prop-types'; // MUI stuff\n\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\nimport Badge from '@material-ui/core/Badge'; // Icons\n\nimport NotificationsIcon from '@material-ui/icons/Notifications';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport ChatIcon from '@material-ui/icons/Chat'; // Redux\n\nimport { connect } from 'react-redux';\nimport { markNotificationsRead } from '../redux/actions/userActions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Notifications extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      anchorEl: null\n    };\n\n    this.handleOpen = event => {\n      this.setState({\n        anchorEl: event.target\n      });\n    };\n\n    this.handleClose = () => {\n      this.setState({\n        anchorEl: null\n      });\n    };\n\n    this.onMenuOpened = () => {\n      let unreadNotificationsIds = this.props.notifications.filter(not => !not.read).map(not => not.notificationId);\n      this.props.markNotificationsRead(unreadNotificationsIds);\n    };\n  }\n\n  render() {\n    const notifications = this.props.notifications;\n    const anchorEl = this.state.anchorEl;\n    dayjs.extend(relativeTime);\n    let notificationsIcon;\n\n    if (notifications && notifications.length > 0) {\n      notifications.filter(not => not.read === false).length > 0 ? notificationsIcon = /*#__PURE__*/_jsxDEV(Badge, {\n        badgeContent: notifications.filter(not => not.read === false).length,\n        color: \"secondary\",\n        children: /*#__PURE__*/_jsxDEV(NotificationsIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }, this) : notificationsIcon = /*#__PURE__*/_jsxDEV(NotificationsIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 32\n      }, this);\n    } else {\n      notificationsIcon = /*#__PURE__*/_jsxDEV(NotificationsIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 27\n      }, this);\n    }\n\n    let notificationsMarkup = notifications && notifications.length > 0 ? notifications.map(not => {\n      const verb = not.type === 'like' ? 'liked' : 'commented on';\n      const time = dayjs(not.createdAt).fromNow();\n      const iconColor = not.read ? 'primary' : 'secondary';\n      const icon = not.type === 'like' ? /*#__PURE__*/_jsxDEV(FavoriteIcon, {\n        color: iconColor,\n        style: {\n          marginRight: 10\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 15\n      }, this) : /*#__PURE__*/_jsxDEV(ChatIcon, {\n        color: iconColor,\n        style: {\n          marginRight: 10\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 15\n      }, this);\n      return /*#__PURE__*/_jsxDEV(MenuItem, {\n        onClick: this.handleClose,\n        children: [icon, /*#__PURE__*/_jsxDEV(Typography, {\n          component: Link,\n          color: \"default\",\n          variant: \"body1\",\n          to: `/users/${not.recipient}/scream/${not.screamId}`,\n          children: [not.sender, \" \", verb, \" your scream \", time]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 15\n        }, this)]\n      }, not.createdAt, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }, this);\n    }) : /*#__PURE__*/_jsxDEV(MenuItem, {\n      onClick: this.handleClose,\n      children: \"You have no notifications yet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }, this);\n    return /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Tooltip, {\n        placement: \"top\",\n        title: \"Notifications\",\n        children: /*#__PURE__*/_jsxDEV(IconButton, {\n          \"aria-owns\": anchorEl ? 'simple-menu' : undefined,\n          \"aria-haspopup\": \"true\",\n          onClick: this.handleOpen,\n          children: notificationsIcon\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Menu, {\n        anchorEl: anchorEl,\n        open: Boolean(anchorEl),\n        onClose: this.handleClose,\n        onEntered: this.onMenuOpened,\n        children: notificationsMarkup\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nNotifications.propTypes = {\n  markNotificationsRead: PropTypes.func.isRequired,\n  notifications: PropTypes.array.isRequired\n};\n\nconst mapStateToProps = state => ({\n  notifications: state.user.notifications\n});\n\nexport default connect(mapStateToProps, {\n  markNotificationsRead\n})(Notifications);","map":{"version":3,"sources":["/mnt/c/Users/gokul/Desktop/React Lane/socialink-client/src/Inks/PostInk.js"],"names":["React","Component","Fragment","Link","dayjs","relativeTime","PropTypes","Menu","MenuItem","IconButton","Tooltip","Typography","Badge","NotificationsIcon","FavoriteIcon","ChatIcon","connect","markNotificationsRead","Notifications","state","anchorEl","handleOpen","event","setState","target","handleClose","onMenuOpened","unreadNotificationsIds","props","notifications","filter","not","read","map","notificationId","render","extend","notificationsIcon","length","notificationsMarkup","verb","type","time","createdAt","fromNow","iconColor","icon","marginRight","recipient","screamId","sender","undefined","Boolean","propTypes","func","isRequired","array","mapStateToProps","user"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport { Link } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport PropTypes from 'prop-types';\n// MUI stuff\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\nimport Badge from '@material-ui/core/Badge';\n// Icons\nimport NotificationsIcon from '@material-ui/icons/Notifications';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport ChatIcon from '@material-ui/icons/Chat';\n// Redux\nimport { connect } from 'react-redux';\nimport { markNotificationsRead } from '../redux/actions/userActions';\n\nclass Notifications extends Component {\n  state = {\n    anchorEl: null\n  };\n  handleOpen = (event) => {\n    this.setState({ anchorEl: event.target });\n  };\n  handleClose = () => {\n    this.setState({ anchorEl: null });\n  };\n  onMenuOpened = () => {\n    let unreadNotificationsIds = this.props.notifications\n      .filter((not) => !not.read)\n      .map((not) => not.notificationId);\n    this.props.markNotificationsRead(unreadNotificationsIds);\n  };\n  render() {\n    const notifications = this.props.notifications;\n    const anchorEl = this.state.anchorEl;\n\n    dayjs.extend(relativeTime);\n\n    let notificationsIcon;\n    if (notifications && notifications.length > 0) {\n      notifications.filter((not) => not.read === false).length > 0\n        ? (notificationsIcon = (\n            <Badge\n              badgeContent={\n                notifications.filter((not) => not.read === false).length\n              }\n              color=\"secondary\"\n            >\n              <NotificationsIcon />\n            </Badge>\n          ))\n        : (notificationsIcon = <NotificationsIcon />);\n    } else {\n      notificationsIcon = <NotificationsIcon />;\n    }\n    let notificationsMarkup =\n      notifications && notifications.length > 0 ? (\n        notifications.map((not) => {\n          const verb = not.type === 'like' ? 'liked' : 'commented on';\n          const time = dayjs(not.createdAt).fromNow();\n          const iconColor = not.read ? 'primary' : 'secondary';\n          const icon =\n            not.type === 'like' ? (\n              <FavoriteIcon color={iconColor} style={{ marginRight: 10 }} />\n            ) : (\n              <ChatIcon color={iconColor} style={{ marginRight: 10 }} />\n            );\n\n          return (\n            <MenuItem key={not.createdAt} onClick={this.handleClose}>\n              {icon}\n              <Typography\n                component={Link}\n                color=\"default\"\n                variant=\"body1\"\n                to={`/users/${not.recipient}/scream/${not.screamId}`}\n              >\n                {not.sender} {verb} your scream {time}\n              </Typography>\n            </MenuItem>\n          );\n        })\n      ) : (\n        <MenuItem onClick={this.handleClose}>\n          You have no notifications yet\n        </MenuItem>\n      );\n    return (\n      <Fragment>\n        <Tooltip placement=\"top\" title=\"Notifications\">\n          <IconButton\n            aria-owns={anchorEl ? 'simple-menu' : undefined}\n            aria-haspopup=\"true\"\n            onClick={this.handleOpen}\n          >\n            {notificationsIcon}\n          </IconButton>\n        </Tooltip>\n        <Menu\n          anchorEl={anchorEl}\n          open={Boolean(anchorEl)}\n          onClose={this.handleClose}\n          onEntered={this.onMenuOpened}\n        >\n          {notificationsMarkup}\n        </Menu>\n      </Fragment>\n    );\n  }\n}\n\nNotifications.propTypes = {\n  markNotificationsRead: PropTypes.func.isRequired,\n  notifications: PropTypes.array.isRequired\n};\n\nconst mapStateToProps = (state) => ({\n  notifications: state.user.notifications\n});\n\nexport default connect(\n  mapStateToProps,\n  { markNotificationsRead }\n)(Notifications);"]},"metadata":{},"sourceType":"module"}